{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport fetch from 'isomorphic-fetch';\nexport default function Certificate() {\n  //   tryingThis = () => {\n  //     console.log('heyyy');\n  //     event.preventDefault();\n  fetch('http://localhost:3000/api/register').then(console.log).catch(console.error); //   };\n\n  const {\n    0: certificate,\n    1: setCertificate\n  } = useState('');\n\n  if (!certificate) {\n    fetch('http://localhost:3000/api/register').then(res => {\n      if (res && res.json) {\n        console.log('It is here!');\n        setCertificate(res.json);\n      } else {\n        console.log('Nope!');\n      }\n    }).catch(console.error);\n  }\n\n  return __jsx(Container, null, __jsx(Row, {\n    className: \"justify-content-center\"\n  }, __jsx(Col, {\n    sm: 6,\n    xs: 12\n  }, __jsx(Card, {\n    border: \"info\"\n  }, __jsx(Card.Header, null, __jsx(FontAwesomeIcon, {\n    icon: ['fas', 'address-card']\n  }), __jsx(\"span\", null, \" Your certificate\")), __jsx(Card.Body, null, __jsx(Card.Text, null, certificate || 'No certificate found')), __jsx(Card.Footer, null, __jsx(Button, {\n    variant: \"primary\",\n    onClick: this.tryingThis\n  }, \"Check\")))), __jsx(Col, null, __jsx(Card, {\n    border: \"primary\"\n  }, __jsx(Card.Header, null, \"Actions\"), __jsx(Card.Body, null, __jsx(Card.Text, null, \"Some quick example text to build on the card title and make up the bulk of the card's content.\"))))));\n} // Certificate.getInitialProps = async ({ req }) => {\n//   const baseURL = req ? `${req.protocol}://${req.get('Host')}` : '';\n//   const res = await fetch(`${baseURL}/api/register`);\n//   return {\n//     certificate: res.status === 200 && (await res.json()),\n//     error: res.status != 200\n//   };\n// };","map":{"version":3,"sources":["/home/mad/geodb/fabric-open-ca/app/src/pages/certificate.js"],"names":["React","useState","Container","Row","Col","Card","Button","FontAwesomeIcon","fetch","Certificate","then","console","log","catch","error","certificate","setCertificate","res","json","tryingThis"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,eAAe,SAASC,WAAT,GAAuB;AACpC;AACA;AACA;AACAD,EAAAA,KAAK,CAAC,oCAAD,CAAL,CACGE,IADH,CACQC,OAAO,CAACC,GADhB,EAEGC,KAFH,CAESF,OAAO,CAACG,KAFjB,EAJoC,CAOpC;;AAEA,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCf,QAAQ,CAAC,EAAD,CAA9C;;AAEA,MAAI,CAACc,WAAL,EAAkB;AAChBP,IAAAA,KAAK,CAAC,oCAAD,CAAL,CACGE,IADH,CACQO,GAAG,IAAI;AACX,UAAIA,GAAG,IAAIA,GAAG,CAACC,IAAf,EAAqB;AACnBP,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAI,QAAAA,cAAc,CAACC,GAAG,CAACC,IAAL,CAAd;AACD,OAHD,MAGO;AACLP,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,KARH,EASGC,KATH,CASSF,OAAO,CAACG,KATjB;AAUD;;AAED,SACE,MAAC,SAAD,QACE,MAAC,GAAD;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE;AAAhB,KACE,MAAC,IAAD;AAAM,IAAA,MAAM,EAAC;AAAb,KACE,MAAC,IAAD,CAAM,MAAN,QACE,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,cAAR;AAAvB,IADF,EAEE,wCAFF,CADF,EAKE,MAAC,IAAD,CAAM,IAAN,QACE,MAAC,IAAD,CAAM,IAAN,QAAYC,WAAW,IAAI,sBAA3B,CADF,CALF,EAQE,MAAC,IAAD,CAAM,MAAN,QACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAE,KAAKI;AAAxC,aADF,CARF,CADF,CADF,EAkBE,MAAC,GAAD,QACE,MAAC,IAAD;AAAM,IAAA,MAAM,EAAC;AAAb,KACE,MAAC,IAAD,CAAM,MAAN,kBADF,EAEE,MAAC,IAAD,CAAM,IAAN,QACE,MAAC,IAAD,CAAM,IAAN,yGADF,CAFF,CADF,CAlBF,CADF,CADF;AAkCD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport fetch from 'isomorphic-fetch';\n\nexport default function Certificate() {\n  //   tryingThis = () => {\n  //     console.log('heyyy');\n  //     event.preventDefault();\n  fetch('http://localhost:3000/api/register')\n    .then(console.log)\n    .catch(console.error);\n  //   };\n\n  const [certificate, setCertificate] = useState('');\n\n  if (!certificate) {\n    fetch('http://localhost:3000/api/register')\n      .then(res => {\n        if (res && res.json) {\n          console.log('It is here!');\n          setCertificate(res.json);\n        } else {\n          console.log('Nope!');\n        }\n      })\n      .catch(console.error);\n  }\n\n  return (\n    <Container>\n      <Row className=\"justify-content-center\">\n        <Col sm={6} xs={12}>\n          <Card border=\"info\">\n            <Card.Header>\n              <FontAwesomeIcon icon={['fas', 'address-card']} />\n              <span> Your certificate</span>\n            </Card.Header>\n            <Card.Body>\n              <Card.Text>{certificate || 'No certificate found'}</Card.Text>\n            </Card.Body>\n            <Card.Footer>\n              <Button variant=\"primary\" onClick={this.tryingThis}>\n                Check\n              </Button>\n            </Card.Footer>\n          </Card>\n        </Col>\n\n        <Col>\n          <Card border=\"primary\">\n            <Card.Header>Actions</Card.Header>\n            <Card.Body>\n              <Card.Text>\n                Some quick example text to build on the card title and make up\n                the bulk of the card's content.\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n// Certificate.getInitialProps = async ({ req }) => {\n//   const baseURL = req ? `${req.protocol}://${req.get('Host')}` : '';\n//   const res = await fetch(`${baseURL}/api/register`);\n\n//   return {\n//     certificate: res.status === 200 && (await res.json()),\n//     error: res.status != 200\n//   };\n// };\n"]},"metadata":{},"sourceType":"module"}